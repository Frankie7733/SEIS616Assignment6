import * as cdk from 'aws-cdk-lib';
import { Construct } from 'constructs';
import * as ec2 from 'aws-cdk-lib/aws-ec2';
import * as elbv2 from 'aws-cdk-lib/aws-elasticloadbalancingv2';
import * as iam from 'aws-cdk-lib/aws-iam';

export class CorpwebStack extends cdk.Stack {
  constructor(scope: Construct, id: string, props?: cdk.StackProps) {
    super(scope, id, props);

    // Parameters
    const instanceType = new cdk.CfnParameter(this, 'InstanceType', {
      type: 'String',
      allowedValues: ['t2.micro', 't2.small'],
      default: 't2.micro',
    });

    const keyPair = new cdk.CfnParameter(this, 'KeyPair', {
      type: 'String',
    });

    const yourIp = new cdk.CfnParameter(this, 'YourIp', {
      type: 'String',
    });

    // VPC
    const vpc = new ec2.Vpc(this, 'EngineeringVpc', {
      cidr: '10.0.0.0/18',
      maxAzs: 2,
      subnetConfiguration: [
        {
          cidrMask: 24,
          name: 'PublicSubnet1',
          subnetType: ec2.SubnetType.PUBLIC,
        },
        {
          cidrMask: 24,
          name: 'PublicSubnet2',
          subnetType: ec2.SubnetType.PUBLIC,
        },
      ],
    });

    // Security Group
    const securityGroup = new ec2.SecurityGroup(this, 'WebserversSG', {
      vpc,
      allowAllOutbound: true,
      securityGroupName: 'WebserversSG',
    });
    securityGroup.addIngressRule(ec2.Peer.ipv4(yourIp.valueAsString), ec2.Port.tcp(22), 'Allow SSH access from your IP');
    securityGroup.addIngressRule(ec2.Peer.anyIpv4(), ec2.Port.tcp(80), 'Allow HTTP access from anywhere');

    // EC2 Instances
    const ami = new ec2.AmazonLinuxImage({
      generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX_2,
    });

    const userData = ec2.UserData.forLinux();
    userData.addCommands(
      'yum update -y',
      'yum install -y git httpd php',
      'service httpd start',
      'chkconfig httpd on',
      'aws s3 cp s3://seis665-public/index.php /var/www/html/'
    );

    const instance1 = new ec2.Instance(this, 'web1', {
      vpc,
      instanceType: new ec2.InstanceType(instanceType.valueAsString),
      machineImage: ami,
      securityGroup,
      keyName: keyPair.valueAsString,
      vpcSubnets: { subnetType: ec2.SubnetType.PUBLIC, onePerAz: true },
      userData,
    });

    const instance2 = new ec2.Instance(this, 'web2', {
      vpc,
      instanceType: new ec2.InstanceType(instanceType.valueAsString),
      machineImage: ami,
      securityGroup,
      keyName: keyPair.valueAsString,
      vpcSubnets: { subnetType: ec2.SubnetType.PUBLIC, onePerAz: true },
      userData,
    });

    // Load Balancer
    const lb = new elbv2.ApplicationLoadBalancer(this, 'EngineeringLB', {
      vpc,
      internetFacing: true,
    });

    const listener = lb.addListener('Listener', {
      port: 80,
      open: true,
    });

    listener.addTargets('EngineeringWebservers', {
      port: 80,
      targets: [instance1, instance2],
      healthCheck: {
        path: '/',
        port: '80',
      },
    });

    // Output
    new cdk.CfnOutput(this, 'WebUrl', {
      value: lb.loadBalancerDnsName,
    });
  }
}
